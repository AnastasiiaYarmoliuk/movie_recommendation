import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import requests
from PIL import Image, ImageTk
from io import BytesIO
import webbrowser
import json
import os


class Movie:
    """–ö–ª–∞—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—É –∑ —É—Å—ñ–º–∞ –π–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏."""
    
    def __init__(self, movie_id, title, overview, poster_path, 
                 genre_names, release_date, vote_average):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±'—î–∫—Ç–∞ —Ñ—ñ–ª—å–º—É.
        
        Args:
            movie_id (int): –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID —Ñ—ñ–ª—å–º—É
            title (str): –ù–∞–∑–≤–∞ —Ñ—ñ–ª—å–º—É
            overview (str): –û–ø–∏—Å —Ñ—ñ–ª—å–º—É
            poster_path (str): –®–ª—è—Ö –¥–æ –ø–æ—Å—Ç–µ—Ä—É
            genre_names (list): –°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä—ñ–≤
            release_date (str): –î–∞—Ç–∞ –≤–∏—Ö–æ–¥—É
            vote_average (float): –°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞
        """
        self.movie_id = movie_id
        self.title = title
        self.overview = overview
        self.poster_path = poster_path
        self.genre_names = genre_names
        self.release_date = release_date
        self.vote_average = vote_average
        self.is_saved = False
        self.is_watched = False
    
    def to_dict(self):
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ —Ñ—ñ–ª—å–º—É –≤ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è."""
        return {
            'movie_id': self.movie_id,
            'title': self.title,
            'overview': self.overview,
            'poster_path': self.poster_path,
            'genre_names': self.genre_names,
            'release_date': self.release_date,
            'vote_average': self.vote_average,
            'is_saved': self.is_saved,
            'is_watched': self.is_watched
        }
    
    @classmethod
    def from_dict(cls, data):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ —Ñ—ñ–ª—å–º—É –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–∞."""
        movie = cls(
            data['movie_id'], data['title'], data['overview'],
            data['poster_path'], data['genre_names'],
            data['release_date'], data['vote_average']
        )
        movie.is_saved = data.get('is_saved', False)
        movie.is_watched = data.get('is_watched', False)
        return movie


class MovieDatabase:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ The Movie Database API."""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ API –∫–ª—é—á–µ–º."""
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API –∫–ª—é—á –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
        self.api_key = "your_api_key_here"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à API –∫–ª—é—á
        self.base_url = "https://api.themoviedb.org/3"
        self.image_base_url = "https://image.tmdb.org/t/p/w500"
        
        # –°–ª–æ–≤–Ω–∏–∫ –∂–∞–Ω—Ä—ñ–≤ –∑ —ó—Ö ID
        self.genres = {
            '–ï–∫—à–Ω': 28,
            '–ü—Ä–∏–≥–æ–¥–∏': 12,
            '–ö–æ–º–µ–¥—ñ—è': 35,
            '–î—Ä–∞–º–∞': 18,
            '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞': 878,
            '–ñ–∞—Ö–∏': 27,
            '–†–æ–º–∞–Ω—Ç–∏–∫–∞': 10749,
            '–¢—Ä–∏–ª–µ—Ä': 53,
            '–ê–Ω—ñ–º–∞—Ü—ñ—è': 16,
            '–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π': 99
        }
    
    def get_movies_by_genre(self, genre_name):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤ –∑–∞ –∂–∞–Ω—Ä–æ–º.
        
        Args:
            genre_name (str): –ù–∞–∑–≤–∞ –∂–∞–Ω—Ä—É
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤ Movie
        """
        if genre_name not in self.genres:
            return []
        
        genre_id = self.genres[genre_name]
        url = f"{self.base_url}/discover/movie"
        params = {
            'api_key': self.api_key,
            'with_genres': genre_id,
            'sort_by': 'popularity.desc',
            'language': 'uk-UA'
        }
        
        try:
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            movies = []
            for movie_data in data.get('results', [])[:10]:  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 10 —Ñ—ñ–ª—å–º—ñ–≤
                # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤–∏ –∂–∞–Ω—Ä—ñ–≤
                genre_names = self._get_genre_names(movie_data.get('genre_ids', []))
                
                movie = Movie(
                    movie_id=movie_data.get('id'),
                    title=movie_data.get('title', '–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞'),
                    overview=movie_data.get('overview', '–û–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'),
                    poster_path=movie_data.get('poster_path'),
                    genre_names=genre_names,
                    release_date=movie_data.get('release_date', ''),
                    vote_average=movie_data.get('vote_average', 0)
                )
                movies.append(movie)
            
            return movies
            
        except requests.exceptions.RequestException as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ—ñ–ª—å–º—ñ–≤: {e}")
            return self._get_sample_movies(genre_name)
    
    def _get_genre_names(self, genre_ids):
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è ID –∂–∞–Ω—Ä—ñ–≤ –≤ —ó—Ö –Ω–∞–∑–≤–∏."""
        genre_map = {v: k for k, v in self.genres.items()}
        return [genre_map.get(gid, '–ù–µ–≤—ñ–¥–æ–º–∏–π') for gid in genre_ids 
                if gid in genre_map]
    
    def _get_sample_movies(self, genre_name):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∑—Ä–∞–∑–∫–æ–≤—ñ —Ñ—ñ–ª—å–º–∏, —è–∫—â–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ."""
        sample_movies = {
            '–ï–∫—à–Ω': [
                Movie(1, "–î–∂–æ–Ω –í—ñ–∫", "–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∫—ñ–ª–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ —Å–ø—Ä–∞–≤–∏", 
                      None, ["–ï–∫—à–Ω"], "2014-10-24", 7.4),
                Movie(2, "–ú–∞—Ç—Ä–∏—Ü—è", "–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –¥—ñ–∑–Ω–∞—î—Ç—å—Å—è –ø—Ä–∞–≤–¥—É –ø—Ä–æ —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å", 
                      None, ["–ï–∫—à–Ω", "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"], "1999-03-31", 8.7)
            ],
            '–ö–æ–º–µ–¥—ñ—è': [
                Movie(3, "–û–¥–∏–Ω –≤–¥–æ–º–∞", "–•–ª–æ–ø—á–∏–∫ –∑–∞—Ö–∏—â–∞—î –¥—ñ–º –≤—ñ–¥ –≥—Ä–∞–±—ñ–∂–Ω–∏–∫—ñ–≤", 
                      None, ["–ö–æ–º–µ–¥—ñ—è"], "1990-11-16", 7.7),
                Movie(4, "–ú–∞—Å–∫–∞", "–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π –∫–ª–µ—Ä–∫ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –º–∞–≥—ñ—á–Ω—É –º–∞—Å–∫—É", 
                      None, ["–ö–æ–º–µ–¥—ñ—è"], "1994-07-29", 6.9)
            ]
        }
        return sample_movies.get(genre_name, [])
    
    def get_movie_trailer(self, movie_id):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–µ–π–ª–µ—Ä–∞ —Ñ—ñ–ª—å–º—É.
        
        Args:
            movie_id (int): ID —Ñ—ñ–ª—å–º—É
            
        Returns:
            str: URL —Ç—Ä–µ–π–ª–µ—Ä–∞ –∞–±–æ None
        """
        url = f"{self.base_url}/movie/{movie_id}/videos"
        params = {
            'api_key': self.api_key,
            'language': 'en-US'
        }
        
        try:
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            for video in data.get('results', []):
                if video.get('type') == 'Trailer' and video.get('site') == 'YouTube':
                    return f"https://www.youtube.com/watch?v={video.get('key')}"
            
        except requests.exceptions.RequestException as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç—Ä–µ–π–ª–µ—Ä–∞: {e}")
        
        return None
    
    def get_poster_image(self, poster_path):
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç–µ—Ä—É —Ñ—ñ–ª—å–º—É.
        
        Args:
            poster_path (str): –®–ª—è—Ö –¥–æ –ø–æ—Å—Ç–µ—Ä—É
            
        Returns:
            PIL.Image: –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç–µ—Ä—É –∞–±–æ None
        """
        if not poster_path:
            return None
        
        try:
            url = f"{self.image_base_url}{poster_path}"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            image = Image.open(BytesIO(response.content))
            image = image.resize((200, 300), Image.Resampling.LANCZOS)
            return image
            
        except (requests.exceptions.RequestException, Exception) as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–æ—Å—Ç–µ—Ä—É: {e}")
            return None


class MovieRecommendationApp:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ–¥–∞—Ç–∫—É –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π —Ñ—ñ–ª—å–º—ñ–≤."""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–æ–¥–∞—Ç–∫—É."""
        self.root = tk.Tk()
        self.root.title("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ñ—ñ–ª—å–º—ñ–≤")
        self.root.geometry("800x600")
        self.root.configure(bg='#2c3e50')
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        self.movie_db = MovieDatabase()
        self.saved_movies = []
        self.watched_movies = []
        self.current_movies = []
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        self.load_data()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.create_widgets()
        
        # –ü—Ä–∏–≤'—è–∑–∫–∞ –ø–æ–¥—ñ—ó –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg='#2c3e50')
        title_frame.pack(pady=20)
        
        title_label = tk.Label(title_frame, text="üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ñ—ñ–ª—å–º—ñ–≤", 
                              font=('Arial', 24, 'bold'), 
                              fg='#ecf0f1', bg='#2c3e50')
        title_label.pack()
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(expand=True, fill='both', padx=20, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ "–í—Å—ñ —Ñ—ñ–ª—å–º–∏"
        self.all_frame = tk.Frame(self.notebook, bg='#34495e')
        self.notebook.add(self.all_frame, text="–í—Å—ñ —Ñ—ñ–ª—å–º–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ"
        self.saved_frame = tk.Frame(self.notebook, bg='#34495e')
        self.notebook.add(self.saved_frame, text=f"–ó–±–µ—Ä–µ–∂–µ–Ω—ñ ({len(self.saved_movies)})")
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ"
        self.watched_frame = tk.Frame(self.notebook, bg='#34495e')
        self.notebook.add(self.watched_frame, text=f"–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ ({len(self.watched_movies)})")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–º—ñ—Å—Ç—É –¥–ª—è –∫–æ–∂–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
        self.create_all_movies_tab()
        self.create_saved_movies_tab()
        self.create_watched_movies_tab()
    
    def create_all_movies_tab(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –∑ —É—Å—ñ–º–∞ —Ñ—ñ–ª—å–º–∞–º–∏."""
        # –§—Ä–µ–π–º –¥–ª—è –≤–∏–±–æ—Ä—É –∂–∞–Ω—Ä—É
        genre_frame = tk.Frame(self.all_frame, bg='#34495e')
        genre_frame.pack(pady=20)
        
        genre_label = tk.Label(genre_frame, text="–í–∏–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:", 
                              font=('Arial', 14), fg='#ecf0f1', bg='#34495e')
        genre_label.pack(side=tk.LEFT, padx=10)
        
        self.genre_var = tk.StringVar()
        genre_combo = ttk.Combobox(genre_frame, textvariable=self.genre_var,
                                  values=list(self.movie_db.genres.keys()),
                                  state="readonly", font=('Arial', 12))
        genre_combo.pack(side=tk.LEFT, padx=10)
        genre_combo.bind('<<ComboboxSelected>>', self.on_genre_selected)
        
        # –§—Ä–µ–π–º –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤
        self.movies_frame = tk.Frame(self.all_frame, bg='#34495e')
        self.movies_frame.pack(expand=True, fill='both', padx=20, pady=20)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        default_label = tk.Label(self.movies_frame, 
                                text="–í–∏–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π",
                                font=('Arial', 16), fg='#bdc3c7', bg='#34495e')
        default_label.pack(expand=True)
    
    def create_saved_movies_tab(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤."""
        self.saved_canvas = tk.Canvas(self.saved_frame, bg='#34495e')
        saved_scrollbar = ttk.Scrollbar(self.saved_frame, orient="vertical", 
                                       command=self.saved_canvas.yview)
        self.saved_scrollable_frame = tk.Frame(self.saved_canvas, bg='#34495e')
        
        self.saved_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.saved_canvas.configure(scrollregion=self.saved_canvas.bbox("all"))
        )
        
        self.saved_canvas.create_window((0, 0), window=self.saved_scrollable_frame, anchor="nw")
        self.saved_canvas.configure(yscrollcommand=saved_scrollbar.set)
        
        self.saved_canvas.pack(side="left", fill="both", expand=True)
        saved_scrollbar.pack(side="right", fill="y")
        
        self.update_saved_movies_display()
    
    def create_watched_movies_tab(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤."""
        self.watched_canvas = tk.Canvas(self.watched_frame, bg='#34495e')
        watched_scrollbar = ttk.Scrollbar(self.watched_frame, orient="vertical", 
                                         command=self.watched_canvas.yview)
        self.watched_scrollable_frame = tk.Frame(self.watched_canvas, bg='#34495e')
        
        self.watched_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.watched_canvas.configure(scrollregion=self.watched_canvas.bbox("all"))
        )
        
        self.watched_canvas.create_window((0, 0), window=self.watched_scrollable_frame, anchor="nw")
        self.watched_canvas.configure(yscrollcommand=watched_scrollbar.set)
        
        self.watched_canvas.pack(side="left", fill="both", expand=True)
        watched_scrollbar.pack(side="right", fill="y")
        
        self.update_watched_movies_display()
    
    def on_genre_selected(self, event):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∂–∞–Ω—Ä—É."""
        genre = self.genre_var.get()
        if genre:
            self.load_movies_by_genre(genre)
    
    def load_movies_by_genre(self, genre):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤ –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–º –∂–∞–Ω—Ä–æ–º."""
        # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        for widget in self.movies_frame.winfo_children():
            widget.destroy()
        
        # –ü–æ–∫–∞–∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        loading_label = tk.Label(self.movies_frame, text="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...", 
                                font=('Arial', 16), fg='#f39c12', bg='#34495e')
        loading_label.pack(expand=True)
        self.root.update()
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤
        movies = self.movie_db.get_movies_by_genre(genre)
        self.current_movies = movies
        
        # –û—á–∏—â–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        loading_label.destroy()
        
        if not movies:
            no_movies_label = tk.Label(self.movies_frame, 
                                      text="–§—ñ–ª—å–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", 
                                      font=('Arial', 16), fg='#e74c3c', bg='#34495e')
            no_movies_label.pack(expand=True)
            return
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤
        self.display_movies(movies, self.movies_frame)
    
    def display_movies(self, movies, parent_frame):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ—ñ–ª—å–º—ñ–≤."""
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas = tk.Canvas(parent_frame, bg='#34495e')
        scrollbar = ttk.Scrollbar(parent_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='#34495e')
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É
        for i, movie in enumerate(movies):
            movie_frame = tk.Frame(scrollable_frame, bg='#2c3e50', relief=tk.RAISED, bd=2)
            movie_frame.pack(fill=tk.X, padx=10, pady=5)
            
            # –ù–∞–∑–≤–∞ —Ñ—ñ–ª—å–º—É
            title_label = tk.Label(movie_frame, text=movie.title, 
                                  font=('Arial', 14, 'bold'), 
                                  fg='#ecf0f1', bg='#2c3e50')
            title_label.pack(anchor=tk.W, padx=10, pady=5)
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ—ñ–ª—å–º
            info_text = f"–†—ñ–∫: {movie.release_date[:4] if movie.release_date else '–ù–µ–≤—ñ–¥–æ–º–æ'} | "
            info_text += f"–†–µ–π—Ç–∏–Ω–≥: {movie.vote_average}/10 | "
            info_text += f"–ñ–∞–Ω—Ä–∏: {', '.join(movie.genre_names)}"
            
            info_label = tk.Label(movie_frame, text=info_text, 
                                 font=('Arial', 10), fg='#bdc3c7', bg='#2c3e50')
            info_label.pack(anchor=tk.W, padx=10)
            
            # –ö–Ω–æ–ø–∫–∞ "–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ"
            detail_btn = tk.Button(movie_frame, text="–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", 
                                  font=('Arial', 10),
                                  bg='#3498db', fg='white',
                                  command=lambda m=movie: self.show_movie_details(m))
            detail_btn.pack(anchor=tk.E, padx=10, pady=5)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def show_movie_details(self, movie):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ—ñ–ª—å–º."""
        detail_window = tk.Toplevel(self.root)
        detail_window.title(f"–î–µ—Ç–∞–ª—ñ: {movie.title}")
        detail_window.geometry("600x700")
        detail_window.configure(bg='#2c3e50')
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ñ—Ä–µ–π–º –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é
        main_frame = tk.Frame(detail_window, bg='#2c3e50')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # –ù–∞–∑–≤–∞ —Ñ—ñ–ª—å–º—É
        title_label = tk.Label(main_frame, text=movie.title, 
                              font=('Arial', 18, 'bold'), 
                              fg='#ecf0f1', bg='#2c3e50')
        title_label.pack(pady=10)
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ—ñ–ª—å–º
        info_frame = tk.Frame(main_frame, bg='#2c3e50')
        info_frame.pack(fill=tk.X, pady=10)
        
        info_text = f"–†—ñ–∫ –≤–∏–ø—É—Å–∫—É: {movie.release_date[:4] if movie.release_date else '–ù–µ–≤—ñ–¥–æ–º–æ'}\n"
        info_text += f"–†–µ–π—Ç–∏–Ω–≥: {movie.vote_average}/10\n"
        info_text += f"–ñ–∞–Ω—Ä–∏: {', '.join(movie.genre_names)}"
        
        info_label = tk.Label(info_frame, text=info_text, 
                             font=('Arial', 12), fg='#bdc3c7', bg='#2c3e50',
                             justify=tk.LEFT)
        info_label.pack(anchor=tk.W)
        
        # –û–ø–∏—Å —Ñ—ñ–ª—å–º—É
        desc_label = tk.Label(main_frame, text="–û–ø–∏—Å:", 
                             font=('Arial', 14, 'bold'), 
                             fg='#ecf0f1', bg='#2c3e50')
        desc_label.pack(anchor=tk.W, pady=(20, 5))
        
        desc_text = scrolledtext.ScrolledText(main_frame, height=8, width=60,
                                             font=('Arial', 11), 
                                             bg='#34495e', fg='#ecf0f1',
                                             wrap=tk.WORD)
        desc_text.pack(fill=tk.X, pady=5)
        desc_text.insert(tk.END, movie.overview)
        desc_text.configure(state='disabled')
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        buttons_frame = tk.Frame(main_frame, bg='#2c3e50')
        buttons_frame.pack(fill=tk.X, pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ —Ç—Ä–µ–π–ª–µ—Ä–∞
        trailer_btn = tk.Button(buttons_frame, text="üé• –î–∏–≤–∏—Ç–∏—Å—å —Ç—Ä–µ–π–ª–µ—Ä", 
                               font=('Arial', 12),
                               bg='#e74c3c', fg='white',
                               command=lambda: self.watch_trailer(movie))
        trailer_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        save_text = "üíæ –í–∏–¥–∞–ª–∏—Ç–∏ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö" if movie.is_saved else "üíæ –ó–±–µ—Ä–µ–≥—Ç–∏"
        save_btn = tk.Button(buttons_frame, text=save_text, 
                            font=('Arial', 12),
                            bg='#27ae60' if not movie.is_saved else '#e67e22', 
                            fg='white',
                            command=lambda: self.toggle_save_movie(movie, save_btn, detail_window))
        save_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ "–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ"
        watched_text = "üëÅ –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö" if movie.is_watched else "üëÅ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–µ"
        watched_btn = tk.Button(buttons_frame, text=watched_text, 
                               font=('Arial', 12),
                               bg='#9b59b6' if not movie.is_watched else '#e67e22', 
                               fg='white',
                               command=lambda: self.toggle_watched_movie(movie, watched_btn, detail_window))
        watched_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        refresh_btn = tk.Button(buttons_frame, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", 
                               font=('Arial', 12),
                               bg='#f39c12', fg='white',
                               command=lambda: self.refresh_movie_info(movie, detail_window))
        refresh_btn.pack(side=tk.LEFT, padx=5)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç–µ—Ä—É (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π)
        if movie.poster_path:
            self.load_poster(movie, main_frame)
    
    def load_poster(self, movie, parent_frame):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç–µ—Ä—É —Ñ—ñ–ª—å–º—É."""
        try:
            poster_image = self.movie_db.get_poster_image(movie.poster_path)
            if poster_image:
                poster_photo = ImageTk.PhotoImage(poster_image)
                poster_label = tk.Label(parent_frame, image=poster_photo, bg='#2c3e50')
                poster_label.image = poster_photo  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
                poster_label.pack(pady=10)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç–µ—Ä—É: {e}")
    
    def watch_trailer(self, movie):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç—Ä–µ–π–ª–µ—Ä–∞ —Ñ—ñ–ª—å–º—É."""
        trailer_url = self.movie_db.get_movie_trailer(movie.movie_id)
        if trailer_url:
            webbrowser.open(trailer_url)
        else:
            messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–¢—Ä–µ–π–ª–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    def toggle_save_movie(self, movie, button, window):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—É –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö."""
        if movie.is_saved:
            # –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö
            self.saved_movies = [m for m in self.saved_movies if m.movie_id != movie.movie_id]
            movie.is_saved = False
            button.configure(text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏", bg='#27ae60')
        else:
            # –î–æ–¥–∞—î–º–æ –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö
            movie.is_saved = True
            if movie not in self.saved_movies:
                self.saved_movies.append(movie)
            button.configure(text="üíæ –í–∏–¥–∞–ª–∏—Ç–∏ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö", bg='#e67e22')
        
        self.update_saved_movies_display()
        self.update_tab_counts()
        self.save_data()
    
    def toggle_watched_movie(self, movie, button, window):
        """–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—É —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ/–Ω–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ."""
        if movie.is_watched:
            # –í–∏–¥–∞–ª—è—î–º–æ –∑ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö
            self.watched_movies = [m for m in self.watched_movies if m.movie_id != movie.movie_id]
            movie.is_watched = False
            button.configure(text="üëÅ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–µ", bg='#9b59b6')
        else:
            # –î–æ–¥–∞—î–º–æ –¥–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö
            movie.is_watched = True
            if movie not in self.watched_movies:
                self.watched_movies.append(movie)
            button.configure(text="üëÅ –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö", bg='#e67e22')
        
        self.update_watched_movies_display()
        self.update_tab_counts()
        self.save_data()
    
    def refresh_movie_info(self, movie, window):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ—ñ–ª—å–º."""
        messagebox.showinfo("–û–Ω–æ–≤–ª–µ–Ω–æ", f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ—ñ–ª—å–º '{movie.title}' –æ–Ω–æ–≤–ª–µ–Ω–∞!")
    
    def update_saved_movies_display(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤."""
        # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–º—ñ—Å—Ç—É
        for widget in self.saved_scrollable_frame.winfo_children():
            widget.destroy()
        
        if not self.saved_movies:
            no_saved_label = tk.Label(self.saved_scrollable_frame, 
                                     text="–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤", 
                                     font=('Arial', 16), fg='#bdc3c7', bg='#34495e')
            no_saved_label.pack(expand=True, pady=50)
        else:
            for movie in self.saved_movies:
                self.create_movie_card(movie, self.saved_scrollable_frame)
    
    def update_watched_movies_display(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤."""
        # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–º—ñ—Å—Ç—É
        for widget in self.watched_scrollable_frame.winfo_children():
            widget.destroy()
        
        if not self.watched_movies:
            no_watched_label = tk.Label(self.watched_scrollable_frame, 
                                       text="–ù–µ–º–∞—î –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤", 
                                       font=('Arial', 16), fg='#bdc3c7', bg='#34495e')
            no_watched_label.pack(expand=True, pady=50)
        else:
            for movie in self.watched_movies:
                self.create_movie_card(movie, self.watched_scrollable_frame)
    
    def create_movie_card(self, movie, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ —Ñ—ñ–ª—å–º—É."""
        card_frame = tk.Frame(parent, bg='#2c3e50', relief=tk.RAISED, bd=2)
        card_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –ù–∞–∑–≤–∞ —Ñ—ñ–ª—å–º—É
        title_label = tk.Label(card_frame, text=movie.title, 
                              font=('Arial', 14, 'bold'), 
                              fg='#ecf0f1', bg='#2c3e50')
        title_label.pack(anchor=tk.W, padx=10, pady=5)
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ—ñ–ª—å–º
        info_text = f"–†—ñ–∫: {movie.release_date[:4] if movie.release_date else '–ù–µ–≤—ñ–¥–æ–º–æ'} | "
        info_text += f"–†–µ–π—Ç–∏–Ω–≥: {movie.vote_average}/10"
        
        info_label = tk.Label(card_frame, text=info_text, 
                             font=('Arial', 10), fg='#bdc3c7', bg='#2c3e50')
        info_label.pack(anchor=tk.W, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ "–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ"
        detail_btn = tk.Button(card_frame, text="–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", 
                              font=('Arial', 10),
                              bg='#3498db', fg='white',
                              command=lambda: self.show_movie_details(movie))
        detail_btn.pack(anchor=tk.E, padx=10, pady=5)
    
    def update_tab_counts(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ —É –Ω–∞–∑–≤–∞—Ö –≤–∫–ª–∞–¥–æ–∫."""
        self.notebook.tab(1, text=f"–ó–±–µ—Ä–µ–∂–µ–Ω—ñ ({len(self.saved_movies)})")
        self.notebook.tab(2, text=f"–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ ({len(self.watched_movies)})")
    
    def save_data(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª."""
        data = {
            'saved_movies': [movie.to_dict() for movie in self.saved_movies],
            'watched_movies': [movie.to_dict() for movie in self.watched_movies]
        }
        
        try:
            with open('movie_data.json', 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
    
    def load_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É."""
        if not os.path.exists('movie_data.json'):
            return
        
        try:
            with open('movie_data.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            self.saved_movies = [Movie.from_dict(movie_data) 
                               for movie_data in data.get('saved_movies', [])]
            self.watched_movies = [Movie.from_dict(movie_data) 
                                 for movie_data in data.get('watched_movies', [])]
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
    
    def on_closing(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏."""
        self.save_data()
        self.root.destroy()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É –ø—Ä–æ–≥—Ä–∞–º–∏."""
        self.root.mainloop()


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏."""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
        import PIL
        print("–ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π —Ñ—ñ–ª—å–º—ñ–≤...")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É
        app = MovieRecommendationApp()
        app.run()
        
    except ImportError as e:
        print("–ü–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ.")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞–∫–µ—Ç–∏ –∫–æ–º–∞–Ω–¥–æ—é:")
        print("pip install pillow requests")
        print(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {e}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏: {e}")


if __name__ == "__main__":
    main()